Async/Await Functions : During our react discussions!


REACT:
    A front-end JS library to create intuitive, responsive UIs.
    HTML, CSS, JavaScript - front-end technologies! (Already discussed)

    React actually works on a concept of "components", the components remain the same and their data keep on changing...

    SPA: Single Page Applications! (index.html is the only page that is loaded from server... rest all data is update inside the components asynchronously)

MEAN/MERN:
    MongoDB(Persistance storage), ExpressJS(Used to setup the servers), AngularJS (UI Library/framework that can be used to make UIs), NodeJS (runtime environment) (MEAN)
    MongoDB, ExpressJS, ReactJS(UI Framework), NodeJS (MERN)

REACT is based on HTML,CSS and JavaScript!

WHY REACT: UI becomes difficult to manage with Vanila JavaScript...

First Application:

Node_modules is the BIGGEST folder in our application. So much so, that we exclude it when pushing the contents to the github...

NEVER SEND YOU NODE_MODULES FOLDER WHILE SENDING YOUR PROJECTS TO ME OR SOMEONE...

node_modules consists of all libraries/files needed to run react application..... NEVER SEND...

Francis Question: When  you will send me folder without node_modules, i will run "npm install" command inside your folder and node_moduels will automatcially come in my folder...


July 3,2024:

package.json: "npm install" actually looks package.json and installs or creates the folder node_modules for all required files that are mentioned in package.json..

ALWAYS ALWAYS SEND YOUR PACKAGE.JSON TO ME WHILE SENDING YOUR PROJECT...NEVER SEND NODE_MODULES.

In public folder we have "index.html", this is the Single page that runs when react app runs...

In src folder we have "index.js" that somehow accesses the index.html's div with root id and renders there "<App/>" component.


App component is the main component that actually runs when we run our react application...

All components' syntax is like functions ... the difference is that the component actually returns "JSX"

function App(){

    return "JSX"
}

JSX ... is a combination of HTML, CSS and JS.
{ } javascript expression box where we can write literally any javascript!

Every component returns "JSX" that is boiled down to HTML when it goes to index.html

<> </> react fragments.. they are used to wrap around all the JSX and they donot generate their own code...

Create a new component and call it in App component:

Props: (properties)
 props to the components are LIKE parameters to the functions
 We pass them while calling the component and receive them in called component....

 function Header(props) {
  let x = props.name;
  let y = props.text;
  return (
    <div>
      <h1>{x}</h1>
      <p>{y}</p>
    </div>
  );
}

export default Header;


function Header(props) {
  let { title, text } = props;
  return (
    <div>
      <h1>{title}</h1>
      <p>{text}</p>
    </div>
  );
}

export default Header;


function Header({ title, text }) {
  return (
    <div>
      <h1>{title}</h1>
      <p>{text}</p>
    </div>
  );
}

export default Header;

July 4,2024:
rafce --- 

rfce ---

New project: tasktracker!

components/Header.jsx

 {/* <button className="btn">Add</button> */}


July 8,2024: WEEK11 ...

Events in React! We can pass any function as a prop to the other component like normal props...and the passed fucntion can be called/used with the events in the receiveing component....

State of a component: the variables and their values at a particular time for a component..

Types of component:
  1. Function components (Hooks: are "state" in function components.. we use hooks in function component to maintain the values/state of this component)
  2. Class Components (state maintains the state/values for a class component)

Hooks:
1. useState() Hook:
    useState() is used to maintain the state variables in function components. 
    
    Their syntax is like following:

    useState(0);
    returns two things, ONE the name of a variable, and a function to handle that variable.

    const[num, setNum]=useState(0); // it creates a num "state" variable and assigns 0 as intitial value to it...it provides a function setNum that will be used to manipulate the num variable...

    const[x,setX] = useState(0);
    const[age,setAge] = useState(20);

 

    num= num+1 CANNOT DO THIS FOR STATE VARIABLES...
    
    setNum(num+1) -> num = 1..

  a state variable changes and updates at all locations automatically, while as normal variabls do not update automatically...

  object values chaging:

  ... spread operator takes the values and use them..

  (previousState) => return {
    ..previouState,name:"Bob Smith"
  }


     <button
        onClick={() => {
          setNumbers([50, 60, 70]);
        }}
      >
        Change Array
      </button>



To maintain state globally we usually define our state variables in App component,
so unless we use something called "Redux", we need to define most state variables in the App component rather than the given component.Because from here "App" we can transfer them to any other components....

Events:

1. Delete event!
  filter() .... go and filter...

2. Reminder event!

3. Add task form:

4. To show and hide Add task form...

5. To change the text and color of the button:

July 15,2024:

JSON Server: NPM (Node Package Manager)
  1.Development server :3000 (one that we are working on)
  2.Production Server :8000 (one that is published as a product)
2. To make production server .. we need build of this application
 a. npm run build (it will create a build folder, that we can server/publish on any server...)
 b. npm i -g serve
 c. serve -s build -p 8000
 d. npm install json-server
 e.   "server":"json-server --watch db.json --port 5000" in Package.json under scripts
f. Now copy all the tasks from App.js and paste them in db.json

July 16,2024:
Hooks: 
1. useState()... used to maintain state of the component..
2. useEffect()..is used to apply any "side effects" while component gets rendered...
   We want some data to be fetched when a component renders...we want to get the updated values when user re-renders..
   useEffect runs with every render of the component..
   useEffect(()=>{})... RUN WITH EVERY RENDERING..
   useEffect(()=>{},[])... JUST RUN ONCE and DONOT RUN AGAIN ON ANY OTHER RENDERING..
   useEffect(()=>{},[state variable name])... ONLY RUN WHEN STATE VARIABLE CHANGES